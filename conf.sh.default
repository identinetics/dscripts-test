#!/usr/bin/env bash

main() {
    SCRIPTDIR=$(cd $(dirname $BASH_SOURCE[0]) && pwd)
    source $SCRIPTDIR/dscripts/conf_lib.sh  # load library functions
    configlib_version=2  # compatible version of conf_lib.sh
    check_version $configlib_version
    # do_not_build $@ # uncomment this line to pull/load image
    init_sudo
    _set_volume_root
    _set_image_and_container_name
    _set_users
    _set_buildargs
    _set_run_args
    #enable_x11_client
    #enable_pkcs11
    #set_enable_sshd     # usually used only for debugging - requires installed sshd in image
}


_set_volume_root() {
    # container volumes mounted to host paths, or symlinks to docker volumes
    DOCKERVOL_SHORT='/dv'
    DOCKERLOG_SHORT='/dl'
    if [[ "$TRAVIS" == "true" ]] || [[ ! -z ${JENKINS_HOME+x} ]]; then
        DOCKERVOL_SHORT='./dv';
        DOCKERLOG_SHORT='./dl';
    fi
    mkdir -p $DOCKERVOL_SHORT $DOCKERLOG_SHORT
    #DOCKER_VOLUME_ROOT='/var/lib/docker/volumes'  # hard coded - check for your config if applicable!
}


_set_image_and_container_name() {
    # IMGID qualifies image, container, user and IP adddress; this is helpful for managing
    # processes on the docker host etc.
    IMGID='99'  # range from 02 .. 99; must be unique per node (registered in github.com/identinetics/dscripts/templates/assigned-uids.adoc)
    PROJSHORT='dscripts-test'
    SERVICEDESCRIPTION=service_name  # e.g. www.example.org or ldap://10.1.1.${IMGID}:8389"  (no blanks!)
    set_staging_env
    export IMAGENAME="rhoerbe/${PROJSHORT}"  # you may or may not want to have an image id and/or staging tag
    export CONTAINERNAME="${IMGID}${PROJSHORT}"
    export DOCKER_REGISTRY=''
    export BUILD_MANIFEST_LIB='manifest.global'  # set to 'manifest.global' if this instance is the source (dev) repo
}


_set_users() {
    export CONTAINERUSER="$PROJSHORT${IMGID}"   # group and user to run container
    export CONTAINERUID="3430${IMGID}"     # gid and uid for CONTAINERUSER
    #export CONTAINERUSER=$(get_metadata uid)      # user/group defined in Dockerfile
    #export CONTAINERUID=$(get_metadata username)  # uid(gid defined in Dockerfile
    export START_AS_ROOT=      # 'True' (e.g. for apache to fall back to www user)
}


_set_buildargs() {
    SLAPDPORT=8389
    export BUILDARGS="--build-arg SLAPDPORT=$SLAPDPORT"
    #export DOCKERFILE_DIR=  # set this if the Docker environment is not in the dscripts submodule's parent directory (-> build will cd there)
    #export DSCRIPTS_DOCKERFILE='Dockerfile.rhel'   # defaults to 'Dockerfile' if unset or empty
    export REPO_STATUS='True'  # if set: generate 'REPO_STATUS' file to be included in docker image at /opt/etc/
    export MANIFEST_SCOPE='local'  # valid values: 'global', 'local'. Extension for manifest library.
                                   # must be local for targets. Requires write access to git for 'global'.
}


_set_run_args() {
    LOGPURGEFILES='/var/log/httpd/* /var/log/shibboleth/*'
    export ENVSETTINGS="
        -e ROOTPW=changeit
        -e USERNAME=slapd
        -e SLAPDHOST=0.0.0.0
        -e DEBUGLEVEL=0
    "
    export STARTCMD=''
}


create_intercontainer_network() {
    # Create a local network on the docker host. As the default docker0 bridge has dynamic
    # addresses, a custom bridge is created allowing predictable addresses.
    network='dockernet'
    set +e  # errexit off
    $sudo docker network ls | awk '{print $2}' | grep $network > /dev/null
    if (( $? == 1)); then
        $sudo docker network create --driver bridge --subnet=10.1.1.0/24 \
                  -o com.docker.network.bridge.name=br-$network $network
    fi
    export NETWORKSETTINGS="
        --net $network
        --ip 10.1.1.${IMGID}
    "
}


setup_vol_mapping() {
    # Create docker volume (-> map_docker_volume) or map a host dir (-> map_host_directory)
    # In both cases create a shortcut in the shortcut directory (DOCKERVOL_SHORT, DOCKERLOG_SHORT)
    mode=$1  # create (used by run.sh)/list (used by manage.sh)
    export VOLLIST=''
    export VOLMAPPING=''
    CONTAINER_GROUPWRITE=no
    map_docker_volume $mode "${CONTAINERNAME}.db" '/var/db' 'Z' $DOCKERVOL_SHORT
    map_docker_volume $mode "${CONTAINERNAME}.etc" '/etc/openldap' 'Z' $DOCKERVOL_SHORT
}


container_status() {
    $sudo docker ps | head -1
    $sudo docker ps --all | egrep $CONTAINERNAME\$
    $sudo docker exec -it $CONTAINERNAME /status.sh
}


main $@
